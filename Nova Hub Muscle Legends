local Fluent = loadstring(game:HttpGet("https://raw.githubusercontent.com/Marwanleprodu91670/Nova-Hub/refs/heads/main/Library%202"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()
 
local Window = Fluent:CreateWindow({
    Title = "Nova Hub Rework  |  Muscle Legends" .. Fluent.Version,
    SubTitle = "by Encrypted",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Private",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})
 
local Tabs = {
    Home = Window:AddTab({ Title = "Home", Icon = "Home" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "zap" }),
    Rebirth = Window:AddTab({ Title = "Rebirth", Icon = "rotate-ccw" }),
    Stats = Window:AddTab({ Title = "Stats", Icon = "newspaper" }),
    AutoKill = Window:AddTab({ Title = "Auto Kill", Icon = "sword" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

-- Home Tab
Tabs.Home:AddParagraph({
    Title = "Welcome",
    Content = "Discord Server:"
})

Tabs.Home:AddButton({
    Title = "Copy Discord Server Link",
    Description = "",
    Callback = function()
        setclipboard("https://discord.gg/TVqdwWur") -- Copies the link to clipboard
    end
})

Tabs.Home:AddParagraph({
    Title = "Local Player",
    Content = ""
})

-- WalkSpeed Textbox and Apply Button
local WalkSpeedInput = Tabs.Home:AddInput("WalkSpeed", {
    Title = "WalkSpeed",
    Default = "16", -- Default value for WalkSpeed
    Placeholder = "Enter WalkSpeed",
    Numeric = true, -- Only allows numbers
    Finished = true, -- Calls callback when you press enter
    Callback = function(Value)
    end
})

WalkSpeedInput:OnChanged(function()
end)

Tabs.Home:AddButton({
    Title = "Apply WalkSpeed",
    Description = "Apply the WalkSpeed",
    Callback = function()
        local walkSpeedValue = tonumber(WalkSpeedInput.Value)
        if walkSpeedValue then
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = walkSpeedValue
        end
    end
})

-- JumpPower Textbox and Apply Button
local JumpPowerInput = Tabs.Home:AddInput("JumpPower", {
    Title = "JumpPower",
    Default = "50", -- Default value for JumpPower
    Placeholder = "Enter JumpPower",
    Numeric = true, -- Only allows numbers
    Finished = true, -- Calls callback when you press enter
    Callback = function(Value)
    end
})

JumpPowerInput:OnChanged(function()
end)

Tabs.Home:AddButton({
    Title = "Apply JumpPower",
    Description = "Apply the JumpPower",
    Callback = function()
        local jumpPowerValue = tonumber(JumpPowerInput.Value)
        if jumpPowerValue then
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = jumpPowerValue
        end
    end
})

-- Size Textbox and Apply Button
local SizeInput = Tabs.Home:AddInput("Size", {
    Title = "Size",
    Default = "1", -- Default value for Size
    Placeholder = "Enter Size",
    Numeric = true, -- Only allows numbers
    Finished = true, -- Calls callback when you press enter
    Callback = function(Value)
    end
})

SizeInput:OnChanged(function()
end)

Tabs.Home:AddButton({
    Title = "Apply Size",
    Description = "Apply the Size",
    Callback = function()
        local sizeValue = tonumber(SizeInput.Value)
        if sizeValue then
            game.Players.LocalPlayer.Character.HumanoidRootPart.Size = Vector3.new(sizeValue, sizeValue, sizeValue)
        end
    end
})

-- Auto Farm Tab
Tabs.AutoFarm:AddParagraph({
    Title = "Reps",
    Content = ""
})

local AutoLiftToggle = Tabs.AutoFarm:AddToggle({
    Title = "Auto Lift",
    Description = "Automatically performs reps",
    Default = false
})

AutoLiftToggle:OnChanged(function(State)
    while State do
        game:GetService("Players").LocalPlayer:WaitForChild("muscleEvent"):FireServer("rep")
        task.wait(0.01)
    end
end)

Tabs.AutoFarm:AddParagraph({
    Title = "Tools",
    Content = ""
})

-- Auto Equip Weight
local AutoEquipWeightToggle = Tabs.AutoFarm:AddToggle({
    Title = "Auto Equip Weight",
    Description = "Automatically equips the 'Weight' tool",
    Default = false
})

AutoEquipWeightToggle:OnChanged(function(State)
    while State do
        local weightTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Weight")
        if not weightTool then
            game.Players.LocalPlayer.Backpack:WaitForChild("Weight")
        end
        game.Players.LocalPlayer.Backpack["Weight"].Parent = game.Players.LocalPlayer.Character
        task.wait(0.1)
    end
end)

-- Auto Equip Pushups
local AutoEquipPushupsToggle = Tabs.AutoFarm:AddToggle({
    Title = "Auto Equip Pushups",
    Description = "Automatically equips the 'Pushups' tool",
    Default = false
})

AutoEquipPushupsToggle:OnChanged(function(State)
    while State do
        local pushupsTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Pushups")
        if not pushupsTool then
            game.Players.LocalPlayer.Backpack:WaitForChild("Pushups")
        end
        game.Players.LocalPlayer.Backpack["Pushups"].Parent = game.Players.LocalPlayer.Character
        task.wait(0.1)
    end
end)

-- Auto Equip Situps
local AutoEquipSitupsToggle = Tabs.AutoFarm:AddToggle({
    Title = "Auto Equip Situps",
    Description = "Automatically equips the 'Situps' tool",
    Default = false
})

AutoEquipSitupsToggle:OnChanged(function(State)
    while State do
        local situpsTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Situps")
        if not situpsTool then
            game.Players.LocalPlayer.Backpack:WaitForChild("Situps")
        end
        game.Players.LocalPlayer.Backpack["Situps"].Parent = game.Players.LocalPlayer.Character
        task.wait(0.1)
    end
end)

-- Auto Equip Handstands
local AutoEquipHandstandsToggle = Tabs.AutoFarm:AddToggle({
    Title = "Auto Equip Handstands",
    Description = "Automatically equips the 'Handstand' tool",
    Default = false
})

AutoEquipHandstandsToggle:OnChanged(function(State)
    while State do
        local handstandTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Handstand")
        if not handstandTool then
            game.Players.LocalPlayer.Backpack:WaitForChild("Handstand")
        end
        game.Players.LocalPlayer.Backpack["Handstand"].Parent = game.Players.LocalPlayer.Character
        task.wait(0.1)
    end
end)


Tabs.Rebirth:AddParagraph({
    Title = "Rebirth Stats",
    Content = "Actual Rebirths: 0\nRebirths Gained In Server: 0"
})

-- Auto Rebirth (Infinitely) Toggle
Tabs.Rebirth:AddToggle({
    Title = "Auto Rebirths (Infinitely)",
    Description = "Automatically performs rebirths infinitely",
    Default = false,
    Callback = function(State)
        while State do
            game:GetService("Players").LocalPlayer:WaitForChild("rebirthRemote"):FireServer()
            task.wait(0.1)
        end
    end
})

-- Target Rebirths
Tabs.Rebirth:AddParagraph({
    Title = "Targeting Rebirth",
    Content = ""
})

-- Rebirth Target Textbox
local RebirthTargetTextbox = Tabs.Rebirth:AddInput("RebirthTarget", {
    Title = "Rebirth Target",
    Default = "0",
    Placeholder = "Enter Target Rebirths",
    Numeric = true,
    Finished = true,
    Callback = function(Value)
    end
})

RebirthTargetTextbox:OnChanged(function()
end)

-- Rebirth Until Target Toggle
Tabs.Rebirth:AddToggle({
    Title = "Rebirth Until Reach Target",
    Description = "Automatically performs rebirths until reaching the target",
    Default = false,
    Callback = function(State)
        local targetRebirths = tonumber(RebirthTargetTextbox.Value)
        local currentRebirths = game.Players.LocalPlayer.leaderstats.Rebirths.Value
        while State and currentRebirths < targetRebirths do
            game:GetService("Players").LocalPlayer:WaitForChild("rebirthRemote"):FireServer()
            task.wait(0.1)
            currentRebirths = game.Players.LocalPlayer.leaderstats.Rebirths.Value
        end
    end
})

-- Auto Set Size 2 Toggle
Tabs.Rebirth:AddToggle({
    Title = "Auto Set Size 2",
    Description = "Automatically sets your size to 2",
    Default = false,
    Callback = function(State)
        while State do
            game.Players.LocalPlayer.Character.HumanoidRootPart.Size = Vector3.new(2, 2, 2)
            task.wait(0.1)
        end
    end
})

-- Update Rebirth Stats
game.Players.LocalPlayer.leaderstats.Rebirths.Changed:Connect(function()
    local actualRebirths = game.Players.LocalPlayer.leaderstats.Rebirths.Value
    local rebirthsGained = actualRebirths -- We track actual rebirths, but you can modify this to track a server-wide count
    local rebirthStatsText = "Actual Rebirths: " .. actualRebirths .. "\nRebirths Gained In Server: " .. rebirthsGained
    Tabs.Rebirth:GetParagraph("Rebirth Stats"):SetDesc(rebirthStatsText)
end)
